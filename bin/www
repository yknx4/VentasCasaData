#!/usr/bin/env node

/**
 * Module dependencies.
 */
var loki = require('lokijs');


//var settings = {
//    autosave: true,
//    autosaveInterval: 1000
//};
//GLOBAL.db = new loki('sales.db', settings);44
GLOBAL.db = new loki('sales.json');
GLOBAL.db.loadDatabase({}, function () {
 // console.log(GLOBAL.db.getCollection('products').data);
});
//db.addCollection('sales');



GLOBAL.getCollection = function (name) {
   console.log('loading '+name);
//    GLOBAL.db.loadCollection(name);
    var coll = GLOBAL.db.getCollection(name);
    if (coll === null) {
        coll = GLOBAL.db.addCollection(name);
    }
    return coll;

}

setInterval(function () {
    GLOBAL.db.save();
}, 5000);



var server = require('../app');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 3000);

/**
 * Create HTTP server.
 */



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('Listening on ' + bind);
    //  debug('Listening on ' + bind);
}
